\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename manual.info
@include version.texi
@settitle The GNU Taler manual for Merchants@value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex op cp
@c %**end of header

@copying
This manual is for GNU Taler merchant backend (version @value{VERSION}, @value{UPDATED}),

Copyright @copyright{} 2016 INRIA

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying
@c If your manual is published on paper by the FSF, it should include
@c The standard FSF Front-Cover and Back-Cover Texts, as given in
@c maintain.texi.
@c
@c Titlepage
@c
@titlepage
@title The GNU Taler manual for Merchants
@subtitle Version @value{VERSION}
@subtitle @value{UPDATED}
@author Marcello Stanisci (@email{marcello.stanisci@@inria.fr})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@summarycontents
@contents

@ifnottex
@node Top
@top The GNU libmicrohttpd Library
@insertcopying
@end ifnottex

@menu
* introduction::	Whom this manual is addressed to	
* dependencies::	Needed libraries to build the backend
* installation::        Installing the Merchant backend
* configuration::       How to set up the Merchant backend
* hello-world::         How to set up a minimalistic shop
@end menu

@node introduction
@chapter Whom this manual is addressed to
This manual is addressed to people who want to integrate Taler
in their online shop. The goal is to install a Taler @emph{backend} and
make it communicate with their existing shop (the @emph{frontend}).
In Taler terminology, the backend is the component that provides RESTful
API to the frontend and that will do all crypto work and communication
with the Taler exchange. In other words, the frontend will never directly
communicate with the exchange.
See official documentation@footnote{@*https://api.taler.net@*https://taler.net}
about Taler protocols.

@node dependencies
@chapter Needed libraries to build the backend

The following packages need to be installed, in order to provide the
backend all the libraries it depends on.

@itemize
@item GNUnet
@item Taler Exchange
@item libmicrohttpd
@item libjansson
@item libcurl
@item libpq
@end itemize

@section Installing GNUnet
GNUnet provides the backend all the routines for doing: cryptography,
string manupulation, interfacing with DB, non-Taler specific JSON manupulation,
logging, operating system interfacing.

Downloading GNUnet:

@code{wget https://gnunet.org/gnunet0-10-1}

Provide the following dependencies:
@itemize
@item @code{libpq} for interfacing with the Postgresql database
@item libgcrypt
@item libjansson
@item libunistring
@item libcurl
@end itemize

Then configure GNUnet as follows:

@example

# From GNUnet's top directory.
$ ./bootstrap
$ ./configure [--prefix=PFX] \
               --without-idn \
               --wit-zlib=no \
               --disable-nls \
               [--with-...]
$ # Each dependency can be fetched from non standard locations via
$ # the '--with-<LIBNAME>' option. See './configure --help'.
$ make
$ make install

@end example

@section Installing The Exchange

Get the latest code:
@code{git clone git://taler.net/exchange}

Provide the following dependencies:
@itemize
@item @code{libpq} for interfacing with the Postgresql database
@item libjansson
@item libmicrohttpd
@item GNUnet
@end itemize

Then configure the exchange as follows:

@example
$ # From exchange's top directory
$ ./bootstrap
$ ./configure [--prefix=PFX] \
              [--with-gnunet=GNUNETPFX] \
              [--with-...]
$ # Each dependency can be fetched from non standard locations via
$ # the '--with-<LIBNAME>' option. See './configure --help'.
$ make
$ make install
@end example

@node installation
@chapter Installing the Merchant backend

The following steps assumes all dependencies are installed. @xref{dependencies}.

Get the code: @code{git clone git://taler.net/merchant}. Configure and install
as follows:

@example
$ # From merchant's top directory
$ ./bootstrap
$ ./configure [--prefix=PFX] \
              [--with-gnunet=GNUNETPFX] \
              [--with-exchange=GNUNETPFX] \
              [--with-...]
$ # Each dependency can be fetched from non standard locations via
$ # the '--with-<LIBNAME>' option. See './configure --help'.
$ make
$ make install
@end example

@node configuration
@chapter How to set up the Merchant backend
The installation already provides reasonable defaults for some of the
configuration options, but some of them must be tuned to the particular case.
The file @code{$HOME/.config/taler.conf} is responsible to ovveride the defaults.

What needs to be tuned:
@itemize
@item Serving: TCP or UNIX sockets?
@item Currency: which currency we work with?
@item Database: what is database's name?
@item Exchanges: which exchanges do we work with?
@item Keying: configure our private key.
@item Instances: which bank accounts do we associate with this Merchant backend?
@end itemize

In the following table, the notation @code{[secion]/option} denotes the option
@code{option} under the section @code{[section]} in the configuration file.
@table @code

@item Serving
Regulates the Merchant backend transport layer, it is controlled by:

@example
[merchant]/serve = TCP | UNIX
@end example

If given,
@itemize
@item @code{TCP}, then we need to set the port in @code{[merchant]/port}
@item @code{UNIX}, then we need to set the unix socket path and mode in
@code{[merchant]/unixpath} and @code{[merchant]/unixpath_mode}. The last takes
the usual permission mask give as number, like 660.
@end itemize
The frontend and backend will then communicate HTTP over the chosen serving option.

@item Currency
Instructs the backend on the currency to work with. Controlled by:

@example
[merchant]/currency
@end example

@item Database
By design, it is possible to work with different DBMSs, so the Merchant backend needs
to know which one is going to be used. Set this option in

@example
[merchant]/db
@end example

currently only the value "postgres" is supported.

After configuring the DBMS, we need to instruct the Merchant backend on how the
database is named. Set this option in

@example
[merchantdb-DBMS]/config
@end example

this option needs to comply with the format "DBMS:///dbname", where "dbname" is
the actual database name under DBMS. Note that DBMS must match what given in
@code{[merchant]/db}.

@item Exchange
An exchange we want to work with is added by setting the following options

@itemize
@item @code{[merchant-exchange-myexchange]/uri}, 
Takes the exchanges base URL, e.g. @code{https://exchange.test.taler.net/}
@item @code{[merchant-exchange-myexchange]/master_key}, 
Takes the base32 encoding of the exchanges master key.
@end itemize

@end table

@node hello-world
@chapter How to set up a minimalistic shop

FIXME Unify ALL options: either @itemize or @display style.

@bye
